import {afterEach, beforeEach, describe, expect, it, vi} from "vitest";import type CreateEnvelopeResponse from "../../src/api/create.envelope.response.ts";import {server} from "../setup.ts";import {http, HttpResponse} from "msw";import type CreateEnvelopeDto from "../../src/api/create.envelope.dto.ts";import {render, screen, waitFor} from "@testing-library/react";import {QueryClient, QueryClientProvider} from "@tanstack/react-query";import {userEvent} from '@testing-library/user-event';import CreateEnvelopeForm from "../../src/components/CreateEnvelopeForm/CreateEnvelopeForm.tsx";const apiUrl = `/api/envelopes`;describe('Envelope management', () => {  let queryClient: QueryClient;  let user: ReturnType<typeof userEvent.setup>;  beforeEach(() => {    vi.clearAllMocks();    user = userEvent.setup();    // Create a new QueryClient for each test    queryClient = new QueryClient({      defaultOptions: {        queries: {          retry: false,        },        mutations: {          retry: false,        },      },    });    render(      <QueryClientProvider client={queryClient}>        <CreateEnvelopeForm />        </QueryClientProvider>    );  });  afterEach(() => {    vi.clearAllMocks();    queryClient.clear();  });  describe('API Integration - Success Scenarios', () => {    it('successfully creates an envelope and shows success message', async () => {      const mockResponse: CreateEnvelopeResponse = {        id: '123',        name: 'Rent',        budget: 500      };      server.use(        http.post(apiUrl, async ({request}) => {          const body = await request.json() as CreateEnvelopeDto;          expect(body).toEqual({name: 'Rent', budget: 500});          return HttpResponse.json(mockResponse, {status: 201});        })      );      // Fill out the form      const nameInput = screen.getByLabelText(/name/i);      const budgetInput = screen.getByLabelText(/budget/i);      await user.type(nameInput, 'Rent');      await user.type(budgetInput, '500');      await user.click(screen.getByRole('button', {name: /submit/i}));      // Wait for successful API call and form reset      await waitFor(() => {        const successMessageText = 'Envelope created successfully!';        expect(screen.getByText(successMessageText)).toBeInTheDocument();        // expect(nameInput).toHaveValue('');        // expect(budgetInput).toHaveValue(null);      });    });  });  describe('API Integration - Error Scenarios', () => {    it('handles API server error (500) and shows error message', async () => {      server.use(        http.post(apiUrl, () => {          return HttpResponse.json(            {error: 'Internal server error'},            {status: 500}          );        })      );      const nameInput = screen.getByLabelText(/name/i);      const budgetInput = screen.getByLabelText(/budget/i);      await user.type(nameInput, 'Rent');      await user.type(budgetInput, '500');      await user.click(screen.getByRole('button', {name: /submit/i}));      // Verify form is not reset on error      await waitFor(() => {        expect(nameInput).toHaveValue('Rent');        expect(budgetInput).toHaveValue('500');        expect(screen.getByText('Failed to create envelope!')).toBeInTheDocument();      });    });    it('handles API validation error (400) and shows error message', async () => {      server.use(        http.post(apiUrl, () => {          return HttpResponse.json(            {error: 'Validation failed', details: 'Envelope with this name already!'},            {status: 400}          );        })      );      const nameInput = screen.getByLabelText(/name/i);      const budgetInput = screen.getByLabelText(/budget/i);      await user.type(nameInput, 'Duplicate Name');      await user.type(budgetInput, '200');      await user.click(screen.getByRole('button', {name: /submit/i}));      await waitFor(() => {        expect(screen.getByText('Envelope with this name already!')).toBeInTheDocument();      });    });    it('handles network error and shows error message', async () => {      server.use(        http.post(apiUrl, () => {          return HttpResponse.error()        })      );      const nameInput = screen.getByLabelText(/name/i);      const budgetInput = screen.getByLabelText(/budget/i);      await user.type(nameInput, 'Network Test');      await user.type(budgetInput, '300');      await user.click(screen.getByRole('button', {name: /submit/i}));      await waitFor(() => {        expect(screen.getByText('Network error, please try again later!')).toBeInTheDocument();      });    });  });});